-- ==> Scales <==
-- Type: scale :: Num a => Pattern String -> Pattern Int -> Pattern a
-- the 'scale' function interprets a pattern of note numbers into a
-- particular named scale. For example:
d1 $ jux rev $ chunk 4 (fast 2 .(|- n 12)) $ off 0.25 (|+ 7) $ struct (iter 4 "t(5,8)")
  $ n (scale "ritusen" "0 .. 7") # s "superpiano"

-- scaleList
-- Type: scaleList :: String
-- The 'scaleList' function outputs all the available scales, at the
-- time of writing:
scaleList

-- getScale
-- Type: getScale :: Num a => [(String, [a])] -> Pattern String -> Pattern Int -> Pattern a
-- You can build your own 'scale' function with additional scales if you
-- wish, using 'getScale'. For example:
let scale = getScale (scaleTable ++ [("techno", [0,2,3,5,7,8,10]),
                                     ("broken", [0,1,4,7,8,10])
                                    ])

-- The above takes the standard 'scaleTable' as a starting point, and adds
-- two custom scales to it. You'll be able to use the new function as normal:
d1 $ n (scale "techno" "0 1 2 3 4 5 6 7") # s "superpiano"

-- toScale
-- Type: toScale :: Num a => [a] -> Pattern Int -> Pattern a
-- 'toScale' allow you to quickly apply a scale without naming it.
d1 $ n (toScale [0,2,3,5,7,8,10] "0 1 2 3 4 5 6 7") # s "superpiano"

-- ==> Chords <==
-- chordList
-- Type: chordList :: String
import Sound.Tidal.Chords
chordList

-- ==> Arpeggios <==
-- arpeggiate
-- Type: arpeggiate :: Pattern a -> Pattern a
-- The 'arpeggiate' (alias arpg) function spreads chords of note numbers over time.
d1 $ n (arpg "'major7 [0,4,7,11]") # s "superpiano"

-- arp
-- Type: arp :: Pattern String -> Pattern a -> Pattern a 
-- the 'arp' function takes an additional pattern of arpeggiate modes.
-- For example:
d1 $ n (arp "<up down diverge>" "<a'm9'8 e'7sus4'8>") # s "superpiano"

-- the different arpeggiate modes are:
-- up down updown downup up&down down&up converge
-- diverge disconverge pinkyup pinkyupdown
-- thumbup thumbupdown
