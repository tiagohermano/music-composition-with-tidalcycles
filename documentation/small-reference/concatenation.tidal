-- functions used to add things together in various ways.

-- MANY CATS
-- CAT
-- Type: cat :: [Pattern a] -> Pattern a 
-- cat, (also knows as 'slowcat', to match with 'fastcat')
-- concatenates a list of patterns into a new pattern; each
-- pattern in the list will maintain its original duration
d1 $ cat [s "bd*2 sn", s "arpy jvbass*2"]

d1 $ cat [sound "bd*2 sn", sound "arpy jvbass*2", sound "drum*2"]

d1 $ cat [
  sound "bd*2 sn",
  sound "arpy jvbass*2",
  sound "drum*2",
  sound "ht mt"
]

-- FASTCAT
-- Type: fastcat :: [Pattern a] -> Pattern a 
-- fastcat works like cat above, but squases all patterns
-- to fit a single cycle
d1 $ fastcat [s "bd*2 sn", s "arpy jvbass*2"]

d1 $ fastcat [sound "bd*2 sn", sound "arpy jvbass*2", sound "drum*2"]

d1 $ fastcat [
  sound "bd*2 sn",
  sound "arpy jvbass*2",
  sound "drum*2",
  sound "ht mt"
]

-- TIMECAT
-- Type: timeCat :: [(Time, Pattern a)] -> Pattern a 
-- timeCat is like fastcat expect that you provide proportionate sizes
-- of the patterns to each other for when they're concatenated into one cycle.
-- The larger the value in the list, the larger relative size the pattern takes
-- in the final loop. If all values are equal then this is equivalent to 'fastcat'
-- (e.g. the following two code fragments are equivalent)
d1 $ fastcat [
  s "bd*4",
  s "hh27*8",
  s "superpiano" # n 0
]

d1 $ timeCat [
  (1, s "bd*4"),
  (1, s "hh27*8"),
  (1, s "superpiano" # n 0)
]

-- RANDCAT
-- Type: randcat :: [Pattern a] -> Pattern a 
-- 'randcat' is similar to 'cat', but rather than playing
-- the given patterns in order, it picks them at random.
-- for example:
d1 $ randcat [
  sound "bd*2 sn",
  sound "jvbass*3",
  sound "drum*2",
  sound "ht mt"
]

-- APPEND FAMILY
-- APPEND
-- Type: append :: Pattern a -> Pattern a -> Pattern a
d1 $ append (s "bd*2 sn") (s "arpy jvbass*2")
-- it has the alias 'slowAppend', in sympathy with
-- 'fastAppend'

-- FASTAPPEND
-- Type: fastAppend :: Pattern a -> Pattern a -> Pattern a
-- 'fastAppend' works like append described above, but each pair of
-- cycles from the two patterns are squashed to fit a single cycle
d1 $ fastAppend (s "bd*2 sn") (s "arpy jvbass*2")

-- WEDGE
-- Type: wedge :: Time -> Pattern a -> Pattern a -> Pattern a 
-- wedge combines two patterns by squashing them into a single cycle.
-- It takes a ratio as the first argument. The ratio determines what
-- percentage of the pattern cycle is taken up by the first pattern.
-- The second pattern filss inthe ramainder of the pattern cycle.
-- For example:
d1 $ wedge (1/4) (s "bd*2 arpy*3 cp sn*2") (sound "odx [feel future]*2 hh hh")

-- BRAK
-- Type: brak :: Pattern a -> Pattern a
-- brak makes a pattern sound a bit like breakbeat. It does this by
-- every other cycle, squashing the pattern to fit half a cycle, and
-- offsetting it by a quarter of a cycle.
d1 $ brak $ s "[feel feel:3, hc:3 hc:2 hc:4 ho:1]"

-- FLATPAT
-- Type: flatpat :: Pattern [a] -> Pattern a
-- 'flatpat' takes the pattern of lists and flattens it into a pattern
-- where all the events list happen simultaneously. For example,
-- the following code uses flatpat in combination with listToPat
-- to create an alternating pattern of chords
d1 $ n (flatpat $ listToPat [[0,4,7],[(-12),(-8),(-5)]]) # s "superpiano" # sustain 2

-- the code is equivalent to
d1 $ n ("[0,4,7] [-12,-8,-5]") # s "superpiano" # sustain 2

