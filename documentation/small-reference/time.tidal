-- ==> Speeding up, slowing down <== 
-- FAST
-- Type: fast :: Pattern Time -> Pattern a -> Pattern a
-- fast speeds up a pattern. For example, the following will
-- play the sound pattern "bd sn kurt" twice as fast
-- (i.e so it repeats twice per cycle), and the vowel pattern
-- three times as fast:
d1 $ s (fast 2 "bd sn kurt")
  # fast 3 (vowel "a e o")

-- The fist parameter can be paterned, for example to play the pattern
-- at twice the speed for the fist half of each cycle and then four times
-- the speed for the second half.
d1 $ fast "2 4" $ s "bd sn kurt cp"

-- FASTGAP
-- Type: fastGap :: Pattern Time -> Pattern a -> Pattern a
-- 'fastGap' speeds up a pattern like fast, but rather than playing it
-- multiple times as fast would, it instead leaves a gap in the remaining
-- space of the cycle. For example, the following will play the sound
-- pattern "bd sn" only once but compressed into the first half of the cycle
-- i.e. twice as fast.
d1 $ s (fastGap 2 "bd sn")

-- SLOW
-- Type: slow :: Pattern Time -> Pattern a -> Pattern a
-- slows down a pattern. For example, the following will play the sound
-- pattern "bd sn kurt" twice as slow (i.e. so it repeats once every two
-- cycles), and the vowel pattern three times as slow
d1 $ s (slow 2 "bd sn kurt")
  # slow 3 (vowel "a e o")

-- HURRY
-- Type: hurry :: Pattern Time -> Pattern a -> Pattern a
-- 'hurry' is similar to fast, in that it speeds up a pattern, but it also
-- increases the speed control by the same factor, so if you're triggering 
-- samples, the sound gets higher in pitch.For example:
d1 $ every 2 (hurry 2) $ s "bd sn:2 ~ cp"

-- ==> Zooming in, Zooming out
-- COMPRESS
-- 'compress' takes a pattern and squeezes it within the specified time span
-- (i.e. the 'arc'). The new resulting pattern is a sped up version of the
-- original.
d1 $ compress (1/4, 3/4) $ s "[bd sn]"

-- in the above example, the pattern will play an arc spanning from 25% to
-- 75% of duration of a cycle. It is equivalent to.
d1 $ s "~ [bd sn]! ~"

-- another example where all events are different
d1 $ compress (1/4, 3/4) $ n (run 4) # s "arpy"
-- it differs from 'zoom' that is preserves the original pattern but it speeds
-- up its events so to match with the new time period.

-- ZOOM
-- plays a portion of a pattern, specified by the beginning and end of a time span (known as 'arc').
-- The new resulting pattern is player over the time period of the original pattern.
d1 $ zoom (0.25, 0.75) $ s "bd*2 hh*3 [sn bd]*2 drum"

-- in the pattern above, zoom is used with an arc from 25% to 75%. It is equivalent to this pattern:
d1 $ s "hh*3 [sn bd] *2"

-- Here's and example of it being used with a conditional:
d1 $ every 4 $ (zoom (0.25, 0.75)) $ s "bd*2 hh*3 [sn bd]*2 drum"

-- WITHIN
-- Use 'within' to apply a function to only a pattern. within takes two arguments: a start time
-- and an end time, specified as floats between 0 and 1, which are applied to the relevant pattern.
-- Note that the second argument must be greater than the first for the function to have any effect.
-- For example, to apply 'fast 2' to only the first half of a pattern:
d1 $ within (0, 0.5) (fast 2) $ s "bd*2 sn lt mt hh hh hh hh"

-- Or, to apply '(# speed "0.5")' to only the last quarter of a pattern:
d1 $ within (0.75, 1) (# speed "0.5") $ s "bd*2 sn lt mt hh hh hh hh"

-- You could accomplish the same result with:
d1 $ (# speed "1 1 1 0.5") $ s "bd*2 sn lt mt hh hh hh hh"

-- ==> Shifting Time <==
-- OFF
-- 'off' is similar to superimpose, in that it applies a function to a pattern, and layers up 
-- the results on top of the original pattern. The difference is that 'off' takes an extra pattern
-- being a time(in cycles) to shift the transformed version of the pattern by.

-- The following plays a pattern on top of itself, but offset by an eighth of a cycle, with a distorting
-- bitcrush effect applied:
d1 $ off 0.125 (# crush 2) $ s "bd [~ sn:2] mt lt*2"

-- the following makes arpeggios by adding offset patterns that are shifted up the scale:
d1 $ slow 2
  $ n (off 0.25 (+12) $ off 0.125 (+7) $ slow 2 "c(3,8) a(3,8,2) f(3,8) e(3,8,4)")
  # s "superpiano"

-- rotL
-- 'rotL' shifts a pattern back in time by the given amount, expressed in cycles. This will skip
-- to the fourth cycle when evaluated:
do
{
  resetCycles;
  d1 $ rotL 4 $ seqP [
    (0, 12, sound "bd bd*2"),
    (4, 12, sound "hh*2 [sn cp] cp future*4"),
    (8, 12, sound (samples "arpy*8" (run 16)))
  ]
}
-- Useful when building and testing out longer sequences.

--rotR
-- 'rotR' is the opposite of 'rotL' as it shifts the pattern forwards in time.

-- spin
-- 'spin' will play the given number of copies of the given control pattern at once.
-- For n copies, each sucessive copy will be offset in time by an additional '1/n'
-- of a cycle, and also panned in space by an additional 'n1'. This function works
-- particulary well on multichannel systems.
d1 
  $ slow 3 
  $ spin 4 
  $ s "drum*3 tabla:4 [arpy:2 ~ arpy] [can:2 can:3]"

-- weave
-- 'weave' applies one control pattern to a list of other control patterns,
-- with a successive time offset. For example:
d1 $ weave 16 (pan sine)
  [
    s "bd sn cp",
    s "casio casio:1",
    s "[jvbass*2 jvbass:2]/2",
    s "hc*4"
  ]
-- in the above example, the 'pan sine' control pattern is slowed down by the
-- given number of cycles, in particular '16', and applied to all of the given
-- sound patterns. What makes this interesting is that the 'pan' control pattern
-- is successively offset for each of the given sound patterns. because the 'pan'
-- is closed down by 16 cycles, and there are four patterns, they are 'spread out',
-- i.e. with a gap of four cycles. For this reason, the four patterns seem to chase
-- after each other around the stereo field. Try listening on headphones to hear this
-- more clearly.

-- You can even have it the other way around, and have the effect parameters chasing
-- after each other around a sound parameter, like this:
d1 $ weave 16 (s "arpy" >| n (run 8))
  [
    vowel "a e i",
    vowel "i [i o] o u",
    vowel "[e o]/3 [i o u]/2",
    speed "1 2 3"
  ]

-- weaveWith
-- 'weaveWith' is similar to the above, but 'weaves' with a list of functions, rather
-- than a list of controls. For example:
d1 $ weaveWith 3 (s "bd [sn drum:2*2] bd*2 [sn drum:1]")
  [
    fast 2,
    (# speed "0.5"),
    chop 16,
    (# gain 1.2)
  ]

-- ==> Reversing Time <==
-- rev
-- 'rev' returns a 'reversed version' of the given pattern.
-- For example 'rev "1 [~ 2] ~ 3"' is equivalent to "3 ~ [2 ~] 1"
-- Note that 'rev' reverses on cycle-by-cycle basis. This means that
-- 'rev (slow 2 "1 2 3 4")' would actually result in '(slow 2 "2 1 4 3")'
-- This is because the 'slow 2' makes the repeating pattern last two cycles,
-- each of which is reversed independently.

-- In practice 'rev' is generaly used with conditionals, for example with
-- 'every':
d1 $ every 3 rev $ n "0 1 [~ 2] 3" # s "arpy"

-- jux
-- the 'jux' function creates strange stereo effects, by applying a function to a pattern,
-- but only in the right-hand channel.
-- For example, the following reverses the pattern on the righthand side:
d1 $ slow 32 $ jux (rev) $ striate' 32 (1/16) $ s "bev"

-- When passing functions to functions like 'jux' and 'every', it's possible to chain
-- multiple transforms with ., for example this both reverses and halves the playback
-- speed of the pattern in the righthand channel:
d1 $ slow 32 $ jux ((# speed "0.5") . rev) $ striate' 32 (1/16) $ s "bev"

-- juxBy
-- With 'jux', the original and effected versions of the pattern are panned hard left
-- and right (i.e., panned at 0 and 1). This can be a bit much, especially when listening
-- on headphones. The variant 'juxBy' has an additional parameter, which brings the channel
-- closer to the centre. For example:
d1 $ juxBy 0.5 (fast 2) $ s "bd sn:1"
-- In the above, the 2 versions of the pattern would be panned at 0.25 and 0.75,
-- rather than 0 and 1.

-- ==> SWING <==
-- swingBy
-- The function 'swingBy x n' breaks each cycle into 'n' slices, and the delays events in
-- the seconds half of each slice by the amount 'x', which is relative to the size of the
-- (half) slice. So if 'x' is '0' it does nothing, '0.5' delays for half the note duration
--, and '1' will wrap around to doing nothing again. The end result is a shuffle or swing-like
-- rhythm. For example:
d1 
  $ swingBy (1/3) 4 
  $ s "hh*8"
-- will delay every other "hh 1/3" of the way to the next "hh"
-- 'swing' is alias for 'swingBy (1/3)'

-- ghost
-- ghost adds quieter, pitch-shifted, copies of an event after the event, emulating ghots
-- notes that are common in drumming patterns.
d1 $ stack [
  ghost $ s "~ sn",
  s "bd*2 [~ bd]"
]
-- The example above creates a kick snare pattern with ghost notes applied to the snare hit.

-- ==> Inside and outside <==
-- 'inside' carries out and operation 'inside' a cycle. For example, 'while rev 0 1 2 3 4 5 6 7'
-- is the same as "7 6 5 4 3 2 1 0", inside 2 rev "0 1 2 3 4 5 6 7" gives "3 2 1 0 7 6 5 4"
-- What this function is really doing is 'slowing down' the pattern by a given factor, applying
-- the given function to it, and then 'speeding it up' by the same factor. In other words, this:
inside 2 rev "0 1 2 3 4 5 6 7"
-- is doing this:
fast 2 $ rev $ slow 2 "0 1 2 3 4 5 6 7"

-- so rather than whole cycles, each half of a cycle is reversed
d1 
  $ inside 2 rev 
  $ n "0 1 2 3 4 5 6 7" # s "drum"

-- outside
-- outside is the inverse of the 'inside' function. 'outside' applies its function outside the
-- cycle. Say you have a pattern that takes 4 cycles to repeat and apply the 'rev' function:
d1 $ rev $ cat [
  s "bd bd sn",
  s "sn sn bd",
  s "lt lt sd",
  s "sd sd bd"
]

-- the above generates:
d1 $ rev $ cat [s "sn bd bd",s "bd sn sn", s "sd lt lt", s "bd sd sd"]

-- However if you apply 'outside':
d1 $ outside 4 (rev) $ cat [
  s "bd bd sn",
  s "sn sn bd",
  s "lt lt sd",
  s "sd sd bd"
]

-- The result is:
d1 $ rev $ cat [s "bd sd sd", s "sd lt lt", s "sn sn bd", s "bd bd sn"]

-- Notice the whole idea has been reversed. What is the function really doing is
-- 'speeding up' the pattern by a given factor, applying the given function to it,
-- and the 'slowing it down' by the same factor. In other words, this:
d1 $ slow 4 $ rev $ fast 4 $ cat [
  s "bd bd sn",
  s "sn sn bd",
  s "lt lt sd",
  s "sd sd bd"
]
-- This compresses the ideia into a single cycles before 'rev' operates and the slows
-- it back to the original speed.

-- ==> Delay Effects <==

-- stut
-- 'stut' applies a type of delay to a pattern. It has 3 parameters, which could be called
-- 'depth', 'feedback' and 'time'. Depth is an integer and the others are floating points.
-- This adds a bit of echo:
d1 $ stut 4 0.5 0.1 $ s "bd sn"
-- The above results in 4 repeats (the original plus 3 echoes), each echo 50% (that's the 0.5)
-- quieter than the last, separated by 1/10th (that's the 0.1) of a cycle.

-- Is is possible to reverse the echo:
d1 $ stut 4 0.5 (-0.1) $ s "bd sn"

--stutWith
-- 'stutWith' is similar to stut described above, but instead of just decreasing volume to
-- produce echoes, 'stutWith' applies a function each step and overlays the result delayed
-- by the given time.
d1 $ stutWith 3 (1/3) (#vowel "{a e i o u}%2") $ s "bd sn"
-- In this case there are two overlays delayed by 1/3 of a cycle, where each has the vowel
-- filter applied.

d1 $ stutWith 4 (1/6) (|* speed "1.5") $ s "arpy arpy:1"
-- In the above, 3 versions are put on top, with each step getting higher in pitch as '|* speed "1.5'
-- is successively applied.
