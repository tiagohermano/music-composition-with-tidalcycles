-- ==> Scaling <==
-- range
-- 'range' will take a pattern which goes from 0 to 1 (such as sine), and scale
-- it to a different range - between the first and second arguments. In the below
-- example, 'range 1 1.5' shifts the range of sine from 0 - 1 to 1 - 1.5
d1
  $ jux (iter 4)
  $ s "arpy arpy:2*2"
  |+ speed (slow 4 $ range 1 1.5 sine)

-- The above is equivalent to the following:
d1
  $ jux (iter 4)
  $ s "arpy arpy:2*2"
  |+ speed (slow 4 $ sine * 0.5 + 1)

-- rangex
-- 'rangex' is an exponential version of 'range' described above, good to use for
-- frequencies. For example, 'range 20 2000 "0.5"' will give '1010' - halfway between
-- 20 and 2000. But 'rangex 20 2000 0.5' will give 200 - halfway between on a logarithmic
-- scale. This usually sound better if you're using the numbers as pitch frequencies.
-- Since rangex uses logarithmics, don't try to scale things to zero or less!

-- quantise
-- 'quantise' is useful for rounding a collection of numbers to some particular
-- base fraction. For example,
quantise 5 [0, 1.3, 2.6, 3.2, 4.7, 5]
-- it will round all the values to the nearest (1/5)=0.2 and thus will output the list
-- [0.0, 1.2, 2.6, 3.2, 4.8, 5.0]. You can use this function to force a continous 
-- pattern like sine into specific values. In the following example:

d1 $ s "superchip*8" # n (quantise 1 $ range (-10) (10) $ slow 8 $ cosine) 
                     # release (quantise 5 $ slow 8 $ sine + 0.1)
-- all the releases selected be rounded to the nearest 0.1 and the notes selected
-- to the nearest 1.

-- 'quantise' with fractional inputs does the consistent thing: 'quantise 0.5' rounds
-- values to the nearest 2, quantise 0.25 rounds the neares 4, etc...

-- ==> Repetitions <==
-- ply
-- The ply function repeats each event the given number of times. For example:
ply 3 $ s "bd ~ sn cp"

-- is equivalent to
s "[bd bd bd] ~ [sn sn sn] [cp cp cp]"

-- the first parameter must be given as a pattern, so that:
ply "2 3" $ s "bd ~ sn cp"

-- is equivalent to
s "[bd bd] ~ [sn sn sn] [cp cp cp]"

-- Here is an example of it being used conditionally
d1 $ every 3 (ply 4) $ s "bd ~ sn cp"


-- stutter
-- 'stutter' is like 'stut' that doesn't reduce the volume or 'ply' if you controlled
-- the timing. 'stutter n t' repeats each event in the pattern 'n' times, separated
-- by 't' time(in fracionts of a cycle).
d1 $ stutter 4 (1/16) $ s "bd cp"

-- should be functionally equivalent to
d1 $ stut 4 1 (1/16) $ s "bd cp"

-- Specific conveniences functions that use stutter are:
echo   = stutter (2 :: Int)
triple = stutter (3 :: Int)
quad   = stutter (4 :: Int)
double = echo

-- stripe
-- the 'stripe' function repeats a pattern at random speeds. The first parameter
-- gives the number of cycles to operate over, for example 'stripe 2' will repeat
-- a pattern twice, over two cycles. Each cycle will be played at a random speed,
-- but in such a way that the total duration will be the same.

-- For example in the following example, the start of every third repetion of the d1
-- pattern will match with the clap on the d2 pattern.
d1 $ stripe 3 $ s "bd sd ~ [mt ht]"

d2 $ s "cp"
